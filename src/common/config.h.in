#ifndef CONFIG_H
#define CONFIG_H

#include <atomic>
#include <cstddef>
#include <functional>
#include "absl/container/btree_set.h"
#include <heartbeat.grpc.pb.h>

namespace Embarcadero{
// the configured options and settings for Embarcadero
#define Embarcadero_VERSION_MAJOR 0.1
#define Embarcadero_VERSION_MINOR 1

#define ORDER_LEVEL 1
#define PORT 1214
#define BROKER_PORT 12140
#define NUM_MAX_BROKERS 4
#define CXL_SIZE (1UL<<35)
#define MAX_TOPIC_SIZE 32
#define TOPIC_NAME_SIZE 31
#define SEGMENT_SIZE (1UL << 34)
#define NUM_DISK_IO_THREADS 1 
#define NUM_NETWORK_IO_THREADS 24 
#define NUM_ACK_THREADS 1
#define ZERO_COPY_SEND_LIMIT 1UL<<23
#define MAX_MSG_SIZE 1UL << 20

//********* Health check configs *********
#define HEARTBEAT_INTERVAL 3 // in seconds
/// The delay to send the first health check
#define HEALTH_CHECK_INITIAL_DELAY_MS 5000
/// The interval between two health checks
#define HEALTH_CHECK_PERIOD_MS 3000
/// The timeout for a health check.
#define HEALTH_CHECK_TIMEOUT_MS 10000
/// The threshold for the amount of retries we do before we consider a node dead.
#define HEALTH_CHECK_FAILURE_THRESHOLD 5

//********* Health check configs *********
#define CGROUP_CORE 85
struct alignas(64) PublishRequest{
	char topic[TOPIC_NAME_SIZE];
	bool acknowledge;
	int client_socket;
	void* payload_address;
	int num_messages;
	size_t total_size;;
};

using CreateTopicEntryCallback = std::function<bool(char*, int, heartbeat_system::SequencerType)>;
using GetRegisteredBrokersCallback = std::function<int(absl::btree_set<int> &registered_brokers, 
														struct MessageHeader** msg_to_order, struct TInode *tinode)>;
} // End of namespace Embarcadero
#endif // CONFIG_H
