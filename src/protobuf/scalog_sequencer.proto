syntax = "proto3";

service ScalogSequencer {
    // Receives a local cut from a local sequencer
    rpc HandleSendLocalCut(stream LocalCut) returns (stream GlobalCut);

    /// Receives a terminate request from a local sequencer
    rpc HandleTerminateGlobalSequencer(TerminateGlobalSequencerRequest) returns (TerminateGlobalSequencerResponse);
}

// Request containing the local cut and the epoch
message LocalCut {
    int64 local_cut = 1;
    string topic = 2;
    int64 broker_id = 3;
    int64 epoch = 4;
}

// Response containing the updated global cut
message GlobalCut {
    map<int64, int64> global_cut = 1;
}

// Empty request for now
message TerminateGlobalSequencerRequest {}

// Empty response for now
message TerminateGlobalSequencerResponse {}