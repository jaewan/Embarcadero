syntax = "proto3";

service ScalogSequencer {
    // Receives a local cut from a local sequencer
    rpc HandleScalogSendLocalCut(ScalogSendLocalCutRequest) returns (ScalogSendLocalCutResponse);
    // Receives the global cut from global sequencer
    rpc HandleScalogSendGlobalCut(ScalogSendGlobalCutRequest) returns (ScalogSendGlobalCutResponse);
}

// Request containing the local cut and the epoch
message ScalogSendLocalCutRequest {
    int64 epoch = 1;
    int64 local_cut = 2;
    string topic = 3;
    int64 broker_id = 4;
}

// Empty response for now
message ScalogSendLocalCutResponse {}

// Request containing the global cut and topic
message ScalogSendGlobalCutRequest {
    repeated int64 global_cut = 1;
    string topic = 2;
}

// Empty response for now
message ScalogSendGlobalCutResponse {}