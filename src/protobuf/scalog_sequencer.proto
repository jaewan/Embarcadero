syntax = "proto3";

service ScalogSequencer {
    // Receives a local cut from a local sequencer
    rpc HandleSendLocalCut(SendLocalCutRequest) returns (SendLocalCutResponse);
    // Receives the global cut from global sequencer
    rpc HandleSendGlobalCut(SendGlobalCutRequest) returns (SendGlobalCutResponse);
}

// Request containing the local cut and the epoch
message SendLocalCutRequest {
    int64 epoch = 1;
    int64 local_cut = 2;
    string topic = 3;
    int64 broker_id = 4;
}

// Empty response for now
message SendLocalCutResponse {
    map<int64, int64> global_cut = 1;
}

// Request containing the global cut and topic
message SendGlobalCutRequest {
    map<int64, int64> global_cut = 1;
    string topic = 2;
}

// Empty response for now
message SendGlobalCutResponse {}