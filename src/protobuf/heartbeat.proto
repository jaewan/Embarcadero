syntax = "proto3";

package heartbeat_system;

import "google/protobuf/empty.proto";

service HeartBeat {
	rpc RegisterNode (NodeInfo) returns (RegistrationStatus);
	rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse);
	rpc GetClusterStatus (ClientInfo) returns (ClusterStatus);
	rpc CreateNewTopic(CreateTopicRequest) returns (CreateTopicResponse);
	rpc KillBrokers(KillBrokersRequest) returns (KillBrokersResponse);
	rpc TerminateCluster(google.protobuf.Empty) returns (google.protobuf.Empty);
	// Client sends a request to get the initial cluster info and subscribes to updates.
	// This is for dynamic broker addition benchmark (to update client immediately)
  rpc SubscribeToCluster (ClientInfo) returns (stream ClusterStatus);
}

enum SequencerType{
	EMBARCADERO = 0;
	KAFKA = 1;
	SCALOG = 2;
	CORFU = 3;
}

message ClientInfo{
	repeated int32 nodes_info = 1;
}

message ClusterStatus{
	repeated string new_nodes = 1;
	repeated int32 removed_nodes = 2;
}

message NodeInfo {
	string node_id = 1;
	string address = 2;
}

message RegistrationStatus {
	bool success = 1;
	int64 broker_id = 2;
	string message = 3;
}

message HeartbeatRequest {
	string node_id = 1;
}

message HeartbeatResponse {
	bool alive = 1;
	bool shutdown = 2;
}

message KillBrokersRequest{
	int64 num_brokers = 1;
}

message KillBrokersResponse{
	bool success = 1;
}

message CreateTopicRequest {
	string topic = 1;
	int32 order = 2;
	int32 replication_factor = 3;
	bool replicate_tinode = 4;
	SequencerType sequencer_type = 5;
}

message CreateTopicResponse {
	bool success = 1;
}
